
Transcriptions of algorithms described in Richard Bird's Pearls of
Functional Algorithm Design.

* The Smallest Free Number

*Given $n$ nonnegative numbers, what's the first one not inside?*

$n$ numbers can't cover of $n+1$ numbers, or so counting pigeons has
taught us. In particular the first $n+1$ are no exception!

#+BEGIN_SRC j :session :exports both

MinFree =: 3 : 0
h =. #y                  NB. holes
pir=. (#~ 0&<: *. <&h) y NB. pigeons-in-range
1 i.~ 0 pir} h#1
)

(;:'pidgeons hole') , > (; MinFree) &.> 0 1 2 ; 0 1 9 ; 0 4 3 2 7
#+END_SRC

#+RESULTS:
: ┌─────────┬────┐
: │pidgeons │hole│
: ├─────────┼────┤
: │0 1 2    │3   │
: ├─────────┼────┤
: │0 1 9    │2   │
: ├─────────┼────┤
: │0 4 3 2 7│1   │
: └─────────┴────┘

* A Surpassing Problem

Given some string, count the number of surpassers for each one. A
surpasser is a later letter that also comes later in the alphabet. In
other words, $a$ appearing at index $i$ is a surpasser of $b$ at $j$
when both $a>b$ and $i>j$.

#+BEGIN_SRC j :session :exports both
BruteMSP1 =: ([: +/ {. < }.)\.
BruteMSP2 =: [: +/"1 ([: </~ i.@#) * (</~)

S=: 'GENERATING'
,. (; [: BruteMSP1 a. i. ]) S
,. (; [: BruteMSP2 a. i. ]) S
#+END_SRC

#+RESULTS:
#+begin_example
┌───────────────────┐
│GENERATING         │
├───────────────────┤
│5 6 2 5 1 4 0 1 0 0│
└───────────────────┘

┌───────────────────┐
│GENERATING         │
├───────────────────┤
│5 6 2 5 1 4 0 1 0 0│
└───────────────────┘
#+end_example


