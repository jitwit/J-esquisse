* 2019 Dyalog Problem Solving Contest

Solutions in J.

* Phase 2

** Easy

*** Shhh! It's a secret!

Easy level difficulty.

**** Cooking on the Grille

Given a rectangular grid and a mask, uncover the message. The basic
idea is to ravel both then select based on the spaces.

#+BEGIN_SRC j :session :exports both
grid=: 6 6$'ESVWGTHOWTHZHIVSAICASSACFAAUCMNYMPCE'
grille=: 6 6$'##### #### ## # # ## ### ## ## #####'

Grille=: (] #~ ' '=[) & ,

grille ([;];Grille) grid
#+END_SRC

#+RESULTS:
: ┌──────┬──────┬─────────┐
: │##### │ESVWGT│THISISFUN│
: │#### #│HOWTHZ│         │
: │# # # │HIVSAI│         │
: │## ###│CASSAC│         │
: │ ## ##│FAAUCM│         │
: │ #####│NYMPCE│         │
: └──────┴──────┴─────────┘

**** The Secret is Key

The idea in the encoding is to split the message into chunks according
to the size of the key, transpose, grade by the key, and ravel.

To decode we also chunk the message, but instead by the length of the
key message by the length of the key (message is a permutation of
transpose). Then we permute based on the grade of the key, transpose,
and ravel.

Because J is fun, we explicitly declare the functions as inverse to
each other with ~TransCoding~

#+BEGIN_SRC j :session :exports both
egsen=: 'OUT OF ORDER'
egkey=: 'APL'

TransEnc=: [: , [ /:~ [: |: -@#@[ ]\ ]
TransDec=: [: , [: |: /:@[ C. -@(%~&#) ]\ ]

TransCoding=: TransEnc :. TransDec

(egsen ; ] ; egkey TransCoding ^: _1 ]) egkey TransCoding egsen
#+END_SRC

#+RESULTS:
: ┌────────────┬────────────┬────────────┐
: │OUT OF ORDER│O  DTFRRUOOE│OUT OF ORDER│
: └────────────┴────────────┴────────────┘

**** When in Prison, Do as the Prisoners Do

~TapEnc~ can surely be simplified. The idea is to index based on div
and mod into alphabet without ~'J'~.

#+BEGIN_SRC j :session :exports both
alpha=: 'J' -.~ a. {~ 65 + i.26
TapDec=: _2 (alpha {~ [:+/5 1*<:)\ [:#;._1' ',]
TapEnc=: [: ;:^:_1 [: #&'*' &.>[:,[:<"0[:([:>:(5|]),.~[:<.%&5) alpha I.]
Tap=: TapEnc :. TapDec

((; Tap^:_1) '* * *** ***** *** *') ,. (; Tap) 'APL'
#+END_SRC

#+RESULTS:
: ┌───────────────────┬───────────────────┐
: │* * *** ***** *** *│APL                │
: ├───────────────────┼───────────────────┤
: │APL                │* * *** ***** *** *│
: └───────────────────┴───────────────────┘


*** Watch Out for That Mine!

Another easy one.

#+BEGIN_SRC j :session :exports both
NB. fixing random seed for reproducability
MakeMines=: dyad : 'y$_1(x?.*/y)}(*/y)$0'
CountMines=: +>:*[:+/[:|(,/,"0/~i:1)&(|.!.0)

(; CountMines) 11 MakeMines 8 5
#+END_SRC

#+RESULTS:
#+begin_example
┌──────────────┬──────────────┐
│_1  0 _1  0  0│_1  4 _1  1  0│
│_1 _1  0  0  0│_1 _1  3  2  1│
│ 0  0  0 _1  0│ 2  3  3 _1  1│
│ 0  0 _1  0  0│ 0  1 _1  3  2│
│ 0  0  0  0 _1│ 0  1  2  3 _1│
│ 0  0  0 _1  0│ 0  0  2 _1  4│
│ 0  0  0 _1 _1│ 1  1  3 _1 _1│
│ 0 _1  0  0  0│ 1 _1  2  2  2│
└──────────────┴──────────────┘
#+end_example


** Medium

*** Degree Array

Given an array list return the degrees of the vertices.

#+BEGIN_SRC j :session :exports both
EdgeList=: 3 : 0
es=. (, |."1) }. y         NB. edges. reverse to make undirected
vs=. >:i.{.,y              NB. vertices
G=. a:,~({."1 </. {:"1) es NB. key on sources of edges
G {~ (vs i.~ ~. {."1 es)   NB. sort so that V[i] has out edges of node i
)

Degrees=: [: > # &.> @ EdgeList

((;  Degrees) _2 ]\ 4 0) ,:~ (; Degrees) _2 ]\ 6 7 1 2 2 3 6 3 5 6 2 5 2 4 4 1
#+END_SRC

#+RESULTS:
#+begin_example
┌───┬───────────┐
│6 7│2 4 2 2 2 2│
│1 2│           │
│2 3│           │
│6 3│           │
│5 6│           │
│2 5│           │
│2 4│           │
│4 1│           │
├───┼───────────┤
│4 0│0 0 0 0    │
└───┴───────────┘
#+end_example

The previous problem could be done without explicitly building the
degree list, but having looked ahead, I saw that it would be useful
for this problem.

#+BEGIN_SRC j :session :exports both
DoubleDegrees=: 3 : 0
G =. EdgeList y
D =. 0, > # &.> G    NB. 0 prepended for indexing reasons
> ([: +/ {&D) &.> G
)

(; DoubleDegrees) _2 ]\ 5 4 1 2 2 3 4 3 2 4
#+END_SRC

#+RESULTS:
: ┌───┬─────────┐
: │5 4│3 5 5 5 0│
: │1 2│         │
: │2 3│         │
: │4 3│         │
: │2 4│         │
: └───┴─────────┘

Because the inputs are undirected graphs, the task is easier than it
could otherwise be. A union find suffices to count the SCCS, by
iterating over the edge list and setting the component representive to
be the minimum representative of the two vertices. Edges are sorted so
that minimum representative propagates properly.

#+BEGIN_SRC j :session :exports both
SCC=: 3 : 0
sccs=.vs=. i.>:{.,y
for_e. /:~ /:~"1 }. y do.
  sccs=. (<./ e{sccs) e} sccs 
end. }. sccs </. vs
)

Components =: # @ SCC

(; Components ; <@SCC) _2 ]\ 4 0
(; Components ; <@SCC) _2 ]\ 12 13 1 2 1 5 5 9 5 10 9 10 3 4 3 7 3 8 4 8 7 11 8 11 11 12 8 12
#+END_SRC

#+RESULTS:
#+begin_example
┌───┬─┬─────────┐
│4 0│4│┌─┬─┬─┬─┐│
│   │ ││1│2│3│4││
│   │ │└─┴─┴─┴─┘│
└───┴─┴─────────┘

┌─────┬─┬────────────────────────────┐
│12 13│3│┌──────────┬─────────────┬─┐│
│ 1  2│ ││1 2 5 9 10│3 4 7 8 11 12│6││
│ 1  5│ │└──────────┴─────────────┴─┘│
│ 5  9│ │                            │
│ 5 10│ │                            │
│ 9 10│ │                            │
│ 3  4│ │                            │
│ 3  7│ │                            │
│ 3  8│ │                            │
│ 4  8│ │                            │
│ 7 11│ │                            │
│ 8 11│ │                            │
│11 12│ │                            │
│ 8 12│ │                            │
└─────┴─┴────────────────────────────┘
#+end_example

**** Verifying with Rosalind graphs

#+BEGIN_SRC j :session :exports both
ros1=: ".'m' freads jcwdpath'Phase2materials2019/rosalind/rosalind_graph3.txt'

Components ros1
#+END_SRC

#+RESULTS:
: 241

*** Numeric Integration

**** Trapezoid

#+BEGIN_SRC j :session :exports both
Trapezoid=: 1 : 0
dx=. x%~b-a[n=. 1+x['a b'=. y
(-:dx)*(1,(2$~<:x),1)+/ .*u a+dx*i.n
)

,. (1000 -: Trapezoid 0 1);(1000 (1&o.) Trapezoid 0 1p1);1000 *: Trapezoid 0 1

^. Trapezoid"0 _&(1,^1) 10^i.4
#+END_SRC

#+RESULTS:
: ┌────────┐
: │0.25    │
: ├────────┤
: │2       │
: ├────────┤
: │0.333334│
: └────────┘
: 
: 0.859141 0.998447 0.999984 1

**** Simpson

#+BEGIN_SRC j :session :exports both
Simpson=: 1 : 0
assert. 0=2|x
dx=. x%~b-a[n=. 1+x['a b'=. y
1r3*dx*(1,(4 2$~<:x),1) +/ .* u a+dx*i.n
)

('n';'n ^. Simpson 1,^1'), ,. <"0 (,. ^. Simpson"0 _&(1,^1)) 2,10^1+i.2
#+END_SRC

#+RESULTS:
: ┌───┬─────────────────┐
: │n  │n ^. Simpson 1,^1│
: ├───┼─────────────────┤
: │2  │0.996735         │
: ├───┼─────────────────┤
: │10 │0.999991         │
: ├───┼─────────────────┤
: │100│1                │
: └───┴─────────────────┘

**** Romberg

I would like to come up with a solution which avoids for-looping. I
was happy to notice the formula ~R=. q * 2 ((_1,d)+/ .*])\ R~ where
~d~ is ~4^m~ and ~q~ ~1/(d-1)~ from the recurrences.

#+BEGIN_SRC j :session :exports both
Romberg=: 1 : 0
R=.-:(+/u y)*]I=.-~/]'a b'=.y
for_n. >:i.x do. R=. R,(-:{:R)+(I%2^n)*+/u a+(I%2^n)*>:+:i.2^<:n end.
for_m. >:i.x do. R=. 2(_1,4^m)&(+/ .*)\ R%<:4^m end. {.R
)

(i.5) (^. Romberg"0 _) 1,^1
(i.10) (1&o. Romberg"0 _) 0 1p1
#+END_SRC

#+RESULTS:
: 0.859141 0.996735 0.999906 0.999998 1
: 
: 1.92367e_16 2.0944 1.99857 2.00001 2 2 2 2 2 2
