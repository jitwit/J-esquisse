* 2019 Dyalog Problem Solving Contest

Solutions in J.

** Phase 2

*** Easy

**** Shhh! It's a secret!

Easy level difficulty.

***** Cooking on the Grille

Given a rectangular grid and a mask, uncover the message. The basic
idea is to ravel both then select based on the spaces.

#+BEGIN_SRC j :session :exports both
grid=: 6 6$'ESVWGTHOWTHZHIVSAICASSACFAAUCMNYMPCE'
grille=: 6 6$'##### #### ## # # ## ### ## ## #####'

Grille=: (] #~ ' '=[) & ,

grille ([;];Grille) grid
#+END_SRC

#+RESULTS:
: ┌──────┬──────┬─────────┐
: │##### │ESVWGT│THISISFUN│
: │#### #│HOWTHZ│         │
: │# # # │HIVSAI│         │
: │## ###│CASSAC│         │
: │ ## ##│FAAUCM│         │
: │ #####│NYMPCE│         │
: └──────┴──────┴─────────┘

***** The Secret is Key

The idea in the encoding is to split the message into chunks according
to the size of the key, transpose, grade by the key, and ravel.

To decode we also chunk the message, but instead by the length of the
key message by the length of the key (message is a permutation of
transpose). Then we permute based on the grade of the key, transpose,
and ravel.

Because J is fun, we explicitly declare the functions as inverse to
each other with ~TransCoding~

#+BEGIN_SRC j :session :exports both
egsen=: 'OUT OF ORDER'
egkey=: 'APL'

TransEnc=: [: , [ /:~ [: |: -@#@[ ]\ ]
TransDec=: [: , [: |: /:@[ C. -@(%~&#) ]\ ]

TransCoding=: TransEnc :. TransDec

(egsen ; ] ; egkey TransCoding ^: _1 ]) egkey TransCoding egsen
#+END_SRC

#+RESULTS:
: ┌────────────┬────────────┬────────────┐
: │OUT OF ORDER│O  DTFRRUOOE│OUT OF ORDER│
: └────────────┴────────────┴────────────┘

***** When in Prison, Do as the Prisoners Do

~TapEnc~ can surely be simplified. The idea is to index based on div
and mod into alphabet without ~'J'~.

#+BEGIN_SRC j :session :exports both
alpha=: 'J' -.~ a. {~ 65 + i.26
TapDec=: _2 (alpha {~ [:+/5 1*<:)\ [:#;._1' ',]
TapEnc=: [: ;:^:_1 [: #&'*' &.>[:,[:<"0[:([:>:(5|]),.~[:<.%&5) alpha I.]
Tap=: TapEnc :. TapDec

((; Tap^:_1) '* * *** ***** *** *') ,. (; Tap) 'APL'
#+END_SRC

#+RESULTS:
: ┌───────────────────┬───────────────────┐
: │* * *** ***** *** *│APL                │
: ├───────────────────┼───────────────────┤
: │APL                │* * *** ***** *** *│
: └───────────────────┴───────────────────┘


**** Watch Out for That Mine!

Another easy one.

#+BEGIN_SRC j :session :exports both
MakeMines=: dyad : 'y $ _1 (x?.*/y)} (*/y)$0' NB. fixing random seed for reproducability
CountMines=: + >:* [: +/ [: | (,/,"0/~i:1)&(|.!.0)

(; CountMines) 11 MakeMines 8 5
#+END_SRC

#+RESULTS:
#+begin_example
┌──────────────┬──────────────┐
│_1  0 _1  0  0│_1  4 _1  1  0│
│_1 _1  0  0  0│_1 _1  3  2  1│
│ 0  0  0 _1  0│ 2  3  3 _1  1│
│ 0  0 _1  0  0│ 0  1 _1  3  2│
│ 0  0  0  0 _1│ 0  1  2  3 _1│
│ 0  0  0 _1  0│ 0  0  2 _1  4│
│ 0  0  0 _1 _1│ 1  1  3 _1 _1│
│ 0 _1  0  0  0│ 1 _1  2  2  2│
└──────────────┴──────────────┘
#+end_example


*** Medium
